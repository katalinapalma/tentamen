openapi: "3.0.0"
info:
  version: 1.0.0
  title: BookLibrary
  description: |
    books available for loan
  license:
    name: MIT
servers:
- url: http://localhost:3000
paths:
  /books:
    get:
      summary: Lists all books
      operationId: listBooks
      tags:
      - books
      parameters:
        - in: query
          name: author
          schema:
            type: string
          description: get a book by its author
      responses:
        '200':
          description: Array of books
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponseBooks"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post: 
      summary: Create a book
      operationId: createBook
      tags:
        - books
      requestBody:
        description: create a book
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBook'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /books/{bookId}:
    get:
      summary: Get a specific book by id
      operationId: getBookById
      tags:
        - books
      parameters:
        - name: bookId
          in: path
          required: true
          description: The id of the book to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBook'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a specific book
      operationId: updateBook
      tags:
        - books
      requestBody:
        description: update book information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      parameters: 
        - name: bookId
          in: path
          required: true
          description: the id of the book to retrieve
          schema:
            type: string
      responses:
        '200':
          description: expected response to the valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBook'
        default:
          description: unexpected error
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a specific book
      operationId: deleteBookById
      tags: 
        - books
      parameters: 
      - name: bookId
        in: path
        required: true
        description: Deletes the book
        schema:
          type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBook'
        '204':
          description: Valid request but there is nothing to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Book: 
      type: object
      properties:
        isbn:
          type: string
        title:
          type: string
        author:
          type: string
        price: 
          type: number
        selleremail: 
          type: string
        used: 
          type: boolean
        location:
          properties: 
            city: 
              type: string
            street:
              type: string
    ResponseBook: 
      allOf:
      - $ref: "#/components/schemas/Book"
      - properties:
          __v:
            type: integer
            format: uint32
          _id:
            type: string
            format: uuid
    ResponseBooks: 
      type: array
      items:
        $ref: "#/components/schemas/ResponseBook"
    Error:
      required:
        - error
      properties:
        error:
          type: object
          properties:
            expose:
              type: boolean
            statusCode:
              type: integer
              format: uint32
            status:
              type: integer
              format: uint32
            body:
              title: body as escaped json
              type: string
            type:
              title: fault desciption
              type: string
